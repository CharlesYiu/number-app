// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using AppKit;

namespace Number
{
	public static partial class PreferencesData
    {
		// keys
		static readonly string DefaultNumberKey = "DefaultNumber";
		static readonly string AddNumberKey = "AddNumber";
		static readonly string MinusNumberKey = "MinusNumber";
		static readonly string IgnoreDecimalsKey = "IgnoreDecimals";

        static readonly string DefaultNumberSetKey = "DefaultNumberSet";
        static readonly string AddNumberSetKey = "AddNumberSet";
        static readonly string MinusNumberSetKey = "MinusNumberSet";

		public static decimal DefaultNumber
        {
			get {
				// if key has value
				if (NSUserDefaults.StandardUserDefaults.BoolForKey(DefaultNumberSetKey))
				{
					// Return value
					return((decimal)NSUserDefaults.StandardUserDefaults.DoubleForKey(DefaultNumberKey));
				}
				// else return default value
				return(0);
			}
			set {
				NSUserDefaults.StandardUserDefaults.SetDouble(decimal.ToDouble(value), DefaultNumberKey);
				NSUserDefaults.StandardUserDefaults.SetBool(true, DefaultNumberSetKey);
			}
        }
		public static decimal AddNumber
		{
			get
			{
				// if key has value
				if (NSUserDefaults.StandardUserDefaults.BoolForKey(AddNumberSetKey))
				{
					// Return value
					return((decimal)NSUserDefaults.StandardUserDefaults.DoubleForKey(AddNumberKey));
				}
				// else return default value
				return(1);
			}
			set
			{
				NSUserDefaults.StandardUserDefaults.SetDouble(decimal.ToDouble(value), AddNumberKey);
				NSUserDefaults.StandardUserDefaults.SetBool(true, AddNumberSetKey);
			}
		}
		public static decimal MinusNumber
		{
			get
			{
				// if key has value
				if (NSUserDefaults.StandardUserDefaults.BoolForKey(MinusNumberSetKey))
				{
					// Return value
					return((decimal)NSUserDefaults.StandardUserDefaults.DoubleForKey(MinusNumberKey));
				}
				// else return default value
				return(1);
			}
			set
			{
				NSUserDefaults.StandardUserDefaults.SetDouble(decimal.ToDouble(value), MinusNumberKey);
				NSUserDefaults.StandardUserDefaults.SetBool(true, MinusNumberSetKey);
			}
		}
		public static bool IgnoreDecimals
		{
			get
			{
				return(NSUserDefaults.StandardUserDefaults.BoolForKey(IgnoreDecimalsKey));
			}
			set
			{
				NSUserDefaults.StandardUserDefaults.SetBool(value, IgnoreDecimalsKey);
			}
		}
    }
	public partial class Preferences : NSViewController
	{
		public Document.Content NumberContent;
		public Preferences (IntPtr handle) : base (handle)
		{
		}
		public override void ViewDidLoad()
		{
			base.ViewDidLoad();
			// Set background color
			View.MakeBackingLayer();
			View.Layer.BackgroundColor = new CGColor(CGConstantColor.White);
			// Set delegates
			DefaultValueInput.Delegate = new DefaultValueInputDelegate();
			AddValueInput.Delegate = new AddValueInputDelegate();
			MinusValueInput.Delegate = new MinusValueInputDelegate();
			// load values
			LoadPreferences();
		}
		void LoadPreferences()
        {
			// set round decimals value
			if (!PreferencesData.IgnoreDecimals)
			{
				// set to on
				RoundDecimalsToggleButton.State = NSCellStateValue.On;
				RoundDecimalsToggleButton.Title = "Yes";
			}
			else
			{
				// set to off
				RoundDecimalsToggleButton.State = NSCellStateValue.Off;
				RoundDecimalsToggleButton.Title = "No";
			}
			// set default number value
			DefaultValueInput.StringValue = PreferencesData.DefaultNumber.ToString();
			// set add number value
			AddValueInput.StringValue = PreferencesData.AddNumber.ToString();
			// set minus number value
			MinusValueInput.StringValue = PreferencesData.MinusNumber.ToString();
		}
		partial void RoundDecimalsToggleAction(NSObject sender)
        {
            if (RoundDecimalsToggleButton.State == NSCellStateValue.On)
            {
				RoundDecimalsToggleButton.Title = "Yes";
            }
			else
            {
				RoundDecimalsToggleButton.Title = "No";
			}
			PreferencesData.IgnoreDecimals = RoundDecimalsToggleButton.State != NSCellStateValue.On;
        }
		partial class DefaultValueInputDelegate : NSTextFieldDelegate
		{
			[Export("controlTextDidChange:")]
			public override void Changed(NSNotification notification)
			{
				// get number input
				NSTextField DefaultValueInput = (NSTextField)notification.Object;
				// Update
				PreferencesData.DefaultNumber = Functions.FormatNumber(DefaultValueInput.StringValue, 0, true);
			}
		}
		partial class AddValueInputDelegate : NSTextFieldDelegate
		{
			[Export("controlTextDidChange:")]
			public override void Changed(NSNotification notification)
			{
				NSTextField AddValueInput = (NSTextField)notification.Object;
				// Update
				PreferencesData.AddNumber = Functions.FormatNumber(AddValueInput.StringValue, 1, true);
			}
		}
		partial class MinusValueInputDelegate : NSTextFieldDelegate
		{
			[Export("controlTextDidChange:")]
			public override void Changed(NSNotification notification)
			{
				NSTextField MinusValueInput = (NSTextField)notification.Object;
				// Update
				PreferencesData.MinusNumber = Functions.FormatNumber(MinusValueInput.StringValue, 1, true);
			}
		}
	}
}
