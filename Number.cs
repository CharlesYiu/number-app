// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using AppKit;
using Foundation;
using CoreGraphics;

namespace Number
{
    public partial class Number : NSViewController
	{
        // Magnification Variables
        bool ZoomIn;
        bool InvertZoom;
        bool CanRunZoom = true;
        nfloat MagnificationChange = 0.020f;
        nfloat ChangedMagnification = 0f;
        nfloat LastMagnification;
        public Document.Content NumberContent;
        public NSWindow Window;
        AppDelegate ApplicationDelegate = (AppDelegate)NSApplication.SharedApplication.Delegate;
        public bool Changable = false;
        public bool IgnoreInput = false;
        partial class NumberInputDelegate : NSTextFieldDelegate
        {
            [Export("controlTextDidChange:")]
            public override void Changed(NSNotification notification)
            {
                NSTextField NumberInput = (NSTextField)notification.Object;
                Number ViewController = (Number)NSApplication.SharedApplication.KeyWindow.ContentViewController;
                Document.Content CurrentNumberContent = ViewController.NumberContent;
                // Update number value
                CurrentNumberContent.NumberValue = Functions.FormatNumber(NumberInput.StringValue, PreferencesData.DefaultNumber, PreferencesData.IgnoreDecimals);
            }
        }
        public Number (IntPtr handle) : base (handle)
		{
		}
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // set background color
            View.MakeBackingLayer();
            View.Layer.BackgroundColor = new CGColor(CGConstantColor.White);
            // Set 
            NumberInput.Delegate = new NumberInputDelegate();
        }
        // Function to update the user interface
        public void OnChange(decimal Number)
        {
            string NumberText = Number.ToString();
            Window.Title = "Number: " + NumberText;
            NumberInput.StringValue = NumberText;
        }
        // Function to make NumberInput Editable
        public void SetChangable(bool State)
        {
            if (IgnoreInput)
            {
                return;
            }
            //Toggle editable
            Changable = State;
            // If editing now
            if (Changable)
            {
                // Focus to editing
                NumberInput.PlaceholderString = NumberInput.StringValue;
                NumberInput.Editable = true;
                NumberInput.SelectText(NumberInput);
                NumberInput.CurrentEditor.SelectedRange = new NSRange(NumberInput.StringValue.Length, 0);
                // Set title 
                ApplicationDelegate.SetChangeButtonTitle("Stop Changing");
            }
            // If not editing anymore
            else
            {
                // Save Result
                NumberContent.ChangeNumber(NumberInput.StringValue);
                // Stop Editing
                NumberInput.AbortEditing();
                // Prevent Editing
                NumberInput.Editable = false;
                // Set title
                ApplicationDelegate.SetChangeButtonTitle("Change");
            }
        }
        // When pressed return when editing
        partial void NumberInputAction(NSObject sender)
        {
            // Exit 
            SetChangable(false);
        }
        // Primary Mouse Button Click
        partial void ClickAction(NSObject sender)
        {
            // Don't run if editing (Clicks may happen when editing) or ignore input
            if (Changable || IgnoreInput)
            {
                return;
            }
            // Add 1
            NumberContent.ChangeNumber(NumberContent.NumberValue + PreferencesData.AddNumber);
        }
        // Secondary Mouse Button Click
        partial void SecondaryClickAction(NSObject sender)
        {
            // Don't run if editing (Clicks may happen when editing) or ignore input
            if (Changable || IgnoreInput)
            {
                return;
            }
            // Minus 1
            NumberContent.ChangeNumber(NumberContent.NumberValue - PreferencesData.MinusNumber);
        }
        async void ZoomActionLoop()
        {
            // Runs until the gesture ends
            while (CanRunZoom)
            {
                bool Zoom = ZoomIn;
                if (InvertZoom)
                {
                    Zoom = !Zoom;
                }
                // If Zooming In (If inverted then it will become "If Zooming Out")
                if (Zoom)
                {
                    // Subtract
                    NumberContent.ChangeNumber(NumberContent.NumberValue - PreferencesData.MinusNumber);
                }
                else
                {
                    // Add
                    NumberContent.ChangeNumber(NumberContent.NumberValue + PreferencesData.AddNumber);
                }
                // Waits for 100ms
                await Task.Delay(100);
            }
            // After the gesture ended reset variables to default value
            InvertZoom = false;
            CanRunZoom = true;
        }
        partial void ZoomAction(Foundation.NSObject sender)
        {
            if (IgnoreInput)
            {
                return;
            }
            // When The Gesture Changed
            if (ZoomGesture.State == NSGestureRecognizerState.Changed)
            {
                // If changed enough
                if (Math.Abs(ChangedMagnification) > MagnificationChange)
                {
                    // Change Zoom Mode
                    if (ZoomGesture.Magnification > 0)
                    {
                        // Zoom Out
                        ZoomIn = false;
                    }
                    else
                    {
                        // Zoom In
                        ZoomIn = true;
                    }
                    // reset changed
                    ChangedMagnification = 0f;
                }
                // Else If LastMagnification is not none
                else if (LastMagnification != null)
                {
                    // Add The change to ChangedMagnification 
                    ChangedMagnification += ZoomGesture.Magnification - LastMagnification;
                }
                Console.WriteLine("Current Magnification: " + ZoomGesture.Magnification);
                Console.WriteLine("Changed: " + ChangedMagnification + ", Change: " + MagnificationChange);

                // Set LastMagnification to the Magnification
                LastMagnification = ZoomGesture.Magnification;
            }
            // If gesture started
            else if (ZoomGesture.State == NSGestureRecognizerState.Began)
            {
                // Set zoom to inverted if the number is negative
                InvertZoom = NumberContent.NumberValue < 0;
                // Run loop
                ZoomActionLoop();
            }
            // If gesture ended
            else if (ZoomGesture.State == NSGestureRecognizerState.Ended)
            {
                // Stop Loop
                CanRunZoom = false;
            }
        }
        partial void SwirlAction(NSObject sender)
        {
            if (IgnoreInput)
            {
                return;
            }
            // Swirl Right
            if (SwirlGesture.RotationInDegrees < 0)
            {
                // Change number to positive
                NumberContent.ChangeNumber(Math.Abs(NumberContent.NumberValue));
            }
            // Swirl Left
            else
            {
                // Change number to negative
                NumberContent.ChangeNumber(-Math.Abs(NumberContent.NumberValue));
            }
        }
    }
}
